from django.db import models
from django.contrib.auth.models import AbstractUser


class CustomUser(AbstractUser):
    USER_TYPE_CHOICES = (
        ('student', 'Student'),
        ('parent', 'Parent'),
        ('staff', 'Staff'),
        ('guest', 'Guest'),
    )

    # The 'email' field is already present in AbstractUser, its unique.
    email = models.EmailField(unique=True, blank=False, null=False)

    # For the user_type field
    user_type = models.CharField(
        max_length=10, # Adjust max_length as needed
        choices=USER_TYPE_CHOICES,
        default='student', # Set a default user type
    )

    # Set the email field as the USERNAME_FIELD for authentication.
    USERNAME_FIELD = 'email'

    # REQUIRED_FIELDS are fields prompted for when creating a superuser via `createsuperuser`.
    # Since 'email' is now the USERNAME_FIELD, it's implicitly required and not listed here.
    # Kept then'username' if we want it to be prompted, otherwise remove it too.
    # If want a truly "email-only" system with no 'username' concept, remove this line.
    # However, AbstractUser *has* a username field, so we manage it.
    REQUIRED_FIELDS = ['username'] # 'username' field from AbstractUser

    # Optional: Override the AbstractUser's username field to make it optional
    # and populate it with email if not provided. This helps manage the default
    # 'username' field that comes with AbstractUser.
    username = models.CharField(max_length=150, unique=True, blank=True, null=True)

    def __str__(self):
        # Prefer full name if available, otherwise fallback to email or username
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name} ({self.email})"
        # If username is auto-generated by allauth, it will be unique, so displaying it is fine.
        return self.email

    # Override save to ensure 'username' is set if it's empty, common practice
    # when email is the primary login.
    # def save(self, *args, **kwargs):
    #     if not self.username:
    #         self.username = self.email
    #     super().save(*args, **kwargs)